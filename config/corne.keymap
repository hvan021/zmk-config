/*
 * Copyright (c) 2020 The ZMK Contributors
 * SPDX-License-Identifier: MIT
 */
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/42.h"

#define DEF 0
#define PAD 1
#define SYM 2
#define NAV 3
#define ADJ 4
#define MSE 5
// #define QWE 1
// #define CDV 2

#define XXX &none
#define ___ &trans


#define TAP_SPEED 175

/* Homerow mods */

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5 // right hand

#ifndef LH2
    #define THUMBS LH1 LH0 RH0 RH1                                          // thumbs on 34 keys
#else
    #define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                  // thumbs on 36+ keys
#endif

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_HOLD_TAP(NAME, \
        flavor = "balanced"; \
        tapping-term-ms = <250>; \
        quick-tap-ms = <150>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

// #include "mouse.dtsi"
#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 10    // default: 10
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <TAP_SPEED>;
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <TAP_SPEED>;
};

/ {

    behaviors{  

      tp: tap_preferred {
          compatible = "zmk,behavior-hold-tap";
          /*label = "TAP_PREFERRED";*/
          #binding-cells = <2>;
          tapping-term-ms = <TAP_SPEED>;
          quick-tap-ms = <0>;
          flavor = "tap-preferred";
          bindings = <&kp>, <&kp>;
        };

        /*hp: hold_preferred {*/
        /*    compatible = "zmk,behavior-hold-tap";*/
        /*    #binding-cells = <2>;*/
        /*    tapping-term-ms = <400>;*/
        /*    quick-tap-ms = <200>;*/
        /*    flavor = "hold-preferred";*/
        /*    bindings = <&kp>, <&kp>;*/
        /*  };*/

        // tdlayout: tdlayswitch {
        //     compatible = "zmk,behavior-tap-dance";
        //     #binding-cells = <0>; 
        //     tapping-term-ms = <TAP_SPEED>; 
        //     bindings = <&to DEF>, <&to CDV>, <&to QWE>;
        // }; 

      // tdnavpad: tdnavpad {
      //     compatible = "zmk,behavior-tap-dance";
      //     #binding-cells = <0>; 
      //     tapping-term-ms = <TAP_SPEED>; 
      //     bindings = <&to NAV>, <&to PAD> ;
      // }; 

      // tdspcret: tdspcret {
      //     compatible = "zmk,behavior-tap-dance";
      //     #binding-cells = <0>; 
      //     tapping-term-ms = <TAP_SPEED>; 
      //     bindings = <&kp SPC>, <&kp RET>; 
      // }; 

        // the right side always turns off on press :/
      soff: soft_off {
          compatible = "zmk,behavior-soft-off";
          #binding-cells = <0>;
          // split-peripheral-off-on-press;
          hold-time-ms = <2000>; // Only turn off it the key is held for 2 seconds or longer.
      };
    };

    combos {
      compatible = "zmk,combos";

      combo_grave{
        timeout-ms = <50>;
          key-positions = <1 2>;
          bindings = <&kp GRAVE>;
      };

      combo_tilde{
        timeout-ms = <50>;
          key-positions = <2 3>;
          bindings = <&kp TILDE>;
      };

      combo_plus{
      timeout-ms = <50>;
        key-positions = <6 7>;
        bindings = <&kp PLUS>;
    };

    combo_bslh {
      timeout-ms = <50>;
        key-positions = <7 8>;
        bindings = <&kp BSLH>;
    };

    combo_pipe {
      timeout-ms = <50>;
        key-positions = <8 9>;
        bindings = <&kp PIPE>;
    };

    combo_dqt {
      timeout-ms = <50>;
        key-positions = <9 10>;
        bindings = <&kp DQT>;
    };

    // combo_bspc {
    //   timeout-ms = <50>;
    //     key-positions = <9 10>;
    //     bindings = <&kp BSPC>;
    // };

    combo_lt{
      timeout-ms = <50>;
        key-positions = <13 14>;
        bindings = <&kp LT>;
    };

    combo_lpar {
      timeout-ms = <40>;
        key-positions = <14 15>;
        bindings = <&kp LPAR>;
    };

    combo_lbrc {
      timeout-ms = <40>;
        key-positions = <15 16>;
        bindings = <&kp LBRC>;
    };

    combo_lbkt {
      timeout-ms = <40>;
        key-positions = <16 17>;
        bindings = <&kp LBKT>;
    };

    combo_minus {
      timeout-ms = <40>;
        key-positions = <18 19>;
        bindings = <&kp MINUS>;
    };

    combo_esc {
      timeout-ms = <50>;
        key-positions = <19 20>;
        bindings = <&kp ESC>;
    };

    combo_under {
      timeout-ms = <40>;
        key-positions = <20 21>;
        bindings = <&kp UNDER>;
    };

    combo_hyphen {
      timeout-ms = <40>;
        key-positions = <21 22>;
        bindings = <&kp MINUS>;
    };

    combo_gt{
      timeout-ms = <50>;
        key-positions = <25 26>;
        bindings = <&kp GT>;
    };

    combo_rpar {
      timeout-ms = <40>;
        key-positions = <26 27>;
        bindings = <&kp RPAR>;
    };

    combo_rbrc {
      timeout-ms = <40>;
        key-positions = <27 28>;
        bindings = <&kp RBRC>;
    };

    combo_rbkt {
      timeout-ms = <40>;
        key-positions = <28 29>;
        bindings = <&kp RBKT>;
    };

    combo_equal {
      timeout-ms = <40>;
        key-positions = <30 31>;
        bindings = <&kp EQUAL>;
    };

    combo_fslh{
      timeout-ms = <50>;
        key-positions = <31 32>;
        bindings = <&kp FSLH>;
    };

    combo_qmark{
      timeout-ms = <50>;
        key-positions = <32 33>;
        bindings = <&kp QMARK>;
    };

    combo_colon {
        timeout-ms = <40>;
        key-positions = <33 34>;
        bindings = <&kp COLON>;
    };

    // combo_tab {
    //   timeout-ms = <50>;
    //     key-positions = <33 34>;
    //     bindings = <&kp TAB>;
    // };

  // combos that require both hands
    combo_capw {
      timeout-ms = <50>;
        key-positions = <16 19>;
        bindings = <&caps_word>;
    };

    //    combo_copy_yank {
    //        timeout-ms = <40>;
    //        key-positions = <26 27>;
    //        bindings = <&kp LG(C)>;
    //    };
    //
    // combo_paste {
    //        timeout-ms = <40>;
    //        key-positions = <27 28>;
    //        bindings = <&kp LG(V)>;
    //    };

  };
};

#define CTL_ESC &mt LCTRL ESC
// #define CMD_ESC &mt LGUI ESC
// #define ALT_SPC &mt LALT SPC
// #define CTRL_SPC &mt LCTRL SPC
// #define TD_LAYRSW &tdlayout  // dvorak qwerty

// #define CTL_TDLAY &mt LCTL &tdlayout

// #define TD_PADNAV &tdnavpad  // dvorak qwerty
// #define TD_SPCRET &tdspcret  // space or return

#define BTCLR &bt BT_CLR_ALL
#define BTSEL &bt BT_SEL 

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <PAD SYM>;
            then-layer = <ADJ>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
      //  +------------------------------------+        +------------------------------------+
//  | TAB  |  '  |  ,  |  .  |  P  |  Y  |        |  F  |  G  |  C  |  R  |  L  | BKSP |
//  | CTRL |  A  |  O  |  E  |  U  |  I  |        |  D  |  H  |  T  |  N  |  S  | DEL  |
//  | SHFT |  ;  |  Q  |  J  |  K  |  X  |        |  B  |  M  |  W  |  V  |  Z  | S/ESC  |
//  +------------------| GUI | LWR | ENT |        | SPC | RSE | ALT/DEL |--------------+
//                     +-----------------+        +-----------------+
            display-name = "DVK";
            bindings = <
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    &kp TAB       &kp SQT       &kp COMMA     &kp DOT       &kp P           &kp Y         &kp F         &kp G         &kp C         &kp R         &kp L         &kp BSPC
    CTL_ESC       &kp A         &kp O         &hml LCTRL E  &hml LSHFT U    &kp I         &kp D         &hmr RSHFT H  &hmr RCTRL T  &kp N         &kp S         &kp MINUS
    // &kp LSHFT     &kp SEMI      &kp Q         &kp J         &kp K           &kp X         &kp B         &kp M         &kp W         &kp V         &kp Z         &kp RSHFT
    &kp LSHFT     &lt MSE SEMI      &kp Q         &kp J         &kp K           &kp X         &kp B         &kp M         &kp W         &kp V         &kp Z         &kp RSHFT
                                              &mt LGUI ESC  &lt PAD TAB   &kp SPC          &kp SPC &lt SYM RET   &mt RALT BSPC 

            >;
        };

// -----------------------------------------------------------------------------------------
// | TAB  |  Q  |  W  |  E  |  R  |    T    |   |  Y  |  U   |  I  |  O  |  P  | ESC |
// | CTRL |  A  |  S  |  D  |  F  |    G    |   |  H  |  J   |  K  |  L  |  ;  |  LWR/'   |
// | SHFT |  Z  |  X  |  C  |  V  |    B    |   |  N  |  M   |  ,  |  .  |  /  | SHFT |
//  +------------------| GUI | LWR | ENT |        | SPC | RSE | ALT/DEL |--------------+
//                     +-----------------+        +-----------------+

//         qwe_layer {
//                 display-name = "QWE";
//                 bindings = <
// &kp TAB   &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P    &kp BSPC
// CTL_ESC   &kp A &kp S &hml LCTRL D &hml LSHFT F &kp G   &kp H &hmr RSHFT J &hmr RCTRL K &kp L &kp SEMI &kp SQT
// &kp LSHFT &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp RSHFT
//                         &trans &trans &trans        &trans &trans &trans
//                 >;
//         };

//         clean_dvk {
//             display-name = "CDV";
//             bindings = <
// &kp TAB   &kp SQT  &kp COMMA &kp DOT &kp P &kp Y    &kp F &kp G &kp C &kp R &kp L &kp BSPC
// CTL_ESC   &kp A    &kp O     &kp E   &kp U &kp I    &kp D &kp H &kp T &kp N &kp S &kp MINUS
// &kp LSHFT &kp SEMI &kp Q     &kp J   &kp K &kp X    &kp B &kp M &kp W &kp V &kp Z &kp RSHFT
//                         &trans &trans &trans        &trans &trans &trans
//             >;
//         };

        pad_layer {
            display-name = "PAD";
            bindings = <
&trans &kp F1   &kp F2   &kp F3    &kp F4    &kp F5  &kp STAR &kp N7 &kp N8 &kp N9 &kp FSLH &trans
&trans &kp N1   &kp N2   &kp N3    &kp N4    &kp N5  &kp DOT  &kp N1 &kp N2 &kp N3 &kp N0  &trans 
&trans &kp N6   &kp N7   &kp N8    &kp N9    &kp N0  &kp PLUS &kp N4 &kp N5 &kp N6 &kp MINUS &trans
                     &trans &trans &trans            &trans &trans &trans  
            >;
        };

//  +------------------------------------+        +------------------------------------+
//  | TAB  |  "  |  <  |  >  |  #  |  1  |        |  2  |  &  |  }  |  {  |  %  | BKSP |
//  | CTRL |  !  |  -  |  +  |  =  |  _  |        |  |  |  :  |  )  |  (  |  ?  | DEL  |
//  | SHFT |  ^  |  /  |  *  |  \  |  $  |        |  `  |  ~  |  ]  |  [  |  @  | S/ESC  |
//  +------------------| GUI | LWR | ENT |        | SPC | RSE | ALT/DEL |--------------+
//                     +-----------------+        +-----------------+
        raise_layer {
            display-name = "SYM";
            bindings = <
&trans &kp EXCL  &kp AT   &kp HASH &kp DLLR  &kp PRCNT  &kp CARET &kp AMPS  &kp STAR  &kp BSLH  &kp FSLH  &trans
&trans &kp F1   &kp F2   &kp F3    &kp F4    &kp F5     &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT &kp QMARK  &kp RET
&trans &kp F6   &kp F7   &kp F8    &kp F9    &kp F10    &kp PLUS  &kp EQUAL &kp PIPE  &kp UNDER &kp MINUS &trans 
                       &trans   &trans   &trans              &trans    &trans    &trans
            >;
        };

        nav_layer {
            display-name = "NAV";
            bindings = <
&trans &trans  &trans  &kp UP &trans   &trans        &trans   &trans   &trans   &trans   &trans   &trans
&trans &kp HOME  &kp LEFT &kp DOWN &kp RIGHT &kp END &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &trans 
&trans &trans &trans &trans &trans &trans            &trans  &trans &trans &trans &trans &trans
                     &trans &trans &trans            &trans  &trans &trans
            >;
        };

//  +------------------------------------+        +------------------------------------+
//  | BCLR  | BT0 | BT1 | BT2 | BT3 | BT4 |        |     |     | MUTE| VOL-| VOL+ |     |
//  | CTRL |     |     |     |     |     |        |     | LFT | DWN | RGT |     | DEL  |
//  | SHFT |     |     |     |     |     |        |     |     |     |     |     | S/ESC  |
//  +------------------| GUI | LWR | ENT |        | SPC | RSE | ALT/DEL |--------------+
//                     +-----------------+        +-----------------+
        tri_layer {
            display-name = "ADJ";
            bindings = <
BTCLR BTSEL 0   BTSEL 1    BTSEL 2   BTSEL 3   BTSEL 4     &kp LC(F2) &trans &trans &trans &trans &kp C_VOL_UP 
&soff &trans  &trans      &trans    &trans    &bootloader  &trans     &trans &trans &trans &trans &kp C_VOL_DN
/*&soff &trans  &trans      &trans    &trans    &bootloader  &to DEF &to CDV &to QWE &to NAV &trans &kp C_VOL_DN*/
&trans &kp LG(Z) &kp LG(X) &kp LG(C) &kp LG(V) &sys_reset  &sys_reset &trans &trans &trans &trans &kp C_MUTE
                        &trans &trans &trans               &trans &trans &trans
            >;
        };

        mse_layer {
            display-name = "MSE";
            bindings = <
&trans &trans  &trans &trans &trans   &trans        &trans   &mmv MOVE_DOWN &mmv MOVE_UP   &trans   &trans   &trans
&trans &trans  &trans &trans &trans   &trans        &mmv MOVE_LEFT    &msc SCRL_UP   &msc SCRL_DOWN    &mmv MOVE_RIGHT &trans      &trans
// &trans &kp HOME  &kp LEFT &kp DOWN &kp RIGHT &kp END &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &trans 
&trans &trans &trans &trans &trans &trans            &trans  &trans &trans &trans &trans &trans
                     &trans &trans &trans            &mkp LCLK &mkp MCLK &mkp RCLK
            >;
        };


/*        num_layer {*/
/*            display-name = "NUM";*/
/*            bindings = <*/
/*&trans &kp EXCL &kp AT   &kp HASH  &kp DLLR  &kp PRCNT  &kp CARET &kp AMPS  &kp STAR  &kp LPAR  &kp RPAR  &trans*/
/*&trans &kp N1   &kp N2   &kp N3    &kp N4    &kp N5     &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT &kp QMARK &kp BSLH */
/*&trans &kp N6   &kp N7   &kp N8    &kp N9    &kp N0     &kp GRAVE &kp TILDE &kp EQUAL &kp PLUS  &kp FSLH  &kp PIPE*/
/*                     &trans &trans &trans         &trans  &trans TD_PADNAV*/
/*            >;*/
/*        };*/

    };
};




/*        lower_layer {*/
/*//  +------------------------------------+        +------------------------------------+*/
/*//  | TAB  | F7  | F5  | F3  | F1  | F9  |        | F11 | F2  | F4  | F6  | RGT | BKSP |*/
/*//  | CTRL |  1  |  2  |  3  |  4  |  5  |        |  6  |  7  |  8  |  9  |  0  | DEL  |*/
/*//  | SHFT |     |     |     |     |     |        |     |     |     |     |     | S/ESC  |*/
/*//  +------------------| GUI | LWR | ENT |        | SPC | RSE | ALT/DEL |--------------+*/
/*//                     +-----------------+        +-----------------+*/
/*            display-name = "NUM";*/
/*            bindings = <*/
/*&trans &kp N1 &kp N2 &kp N3 &kp N4 &kp N5         &kp N6  &kp N7 &kp N8 &kp N9 &kp N0 &trans*/
/*&trans &kp FSLH &kp STAR &kp PLUS &kp MINUS &kp DOT &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &trans */
/*&trans &kp F7 &kp F5 &kp F3 &kp F1 &kp F9         &kp F11 &kp F2 &kp F4 &kp F6 &kp F8 &trans*/
/*                     &trans &trans &trans         &trans  &trans TD_PADNAV*/
/*            >;*/
/*        };*/



/* Key positions
 0    1    2    3    4    5     6    7    8    9    10    11 
 12   13   14   15   16   17    18   19   20   21   22    23 
 24   25   26   27   28   29    30   31   32   33   34    35 
                36   37   38    39 40 41
 */

// &kp     &kp     &kp     &kp     &kp     &kp     &kp     &kp     &kp     &kp     &kp     &kp     
// &trans   &trans   &trans   &trans   &trans   &trans   
// &kp      &kp      &kp      &kp      &kp      &kp     

/*&trans &trans &trans &trans &trans &trans         &trans  &trans &trans &trans &trans &trans*/

/*&trans &kp F7 &kp F5 &kp F3 &kp F1 &kp F9         &kp F11 &kp F2 &kp F4 &kp F6 &kp F8 &trans*/



/* vim: set tw=146: */
