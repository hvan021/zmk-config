/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
// #include <dt-bindings/zmk/outputs.h>

#define DEF 0
#define NUM 1
#define SYM 2
#define ADJ 3


&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
};


#define COMBO(_name_, _bindings_, _key_positions_) \
combo_##_name_ {                                   \
    timeout-ms            = <30>;                  \
    require-prior-idle-ms = <COMBO_IDLE_MS>;       \
    bindings              = <_bindings_>;          \
    key-positions         = <_key_positions_>;     \
    layers                = <0 1>;                 \
};
/* Key positions
 0    1    2    3    4    5     6    7    8    9    10    11 
 12   13   14   15   16   17    18   19   20   21   22    23 
 24   25   26   27   28   29    30   31   32   33   34    35 
                36   37   38    39 40 41
 */

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <19 20>;
            bindings = <&kp ESC>;
        };

        combo_del {
            timeout-ms = <50>;
            key-position =  <10 11>;
            bindings = <&kp DEL>;
        };
        // invoke macros
        /*COMBO(vim_esc, &vim_esc, 19 20)*/
    /*    
        COMBO(vim_q,  &vim_q,   0  1)
        COMBO(vim_s,  &vim_s,  20 21)
        COMBO(dir_up, &dir_up, 28 29)
        // media keys
        COMBO(vol_up, &kp C_VOL_UP,  9 19)
        COMBO(vol_dn, &kp C_VOL_DN, 19 29)
        // navigation
        COMBO(arr_up, &kp UARW, 17 27)
        COMBO(arr_dn, &kp DARW, 16 26)
        COMBO(arr_lt, &kp LARW, 15 25)
        COMBO(arr_rt, &kp RARW, 18 28)
        COMBO(pageup, &kp PG_UP, 7 17)
        COMBO(pagedn, &kp PG_DN, 6 16)
        // shortcuts
        COMBO(nav_up, &kp LS(LA(UARW)),  27 28)
        COMBO(nav_dn, &kp LS(LA(DARW)),  26 27)
        COMBO(sg_spc, &kp LS(LG(SPACE)), 12 13)
        // layer toggle
        COMBO(numb,   &tog NUM, 25 26 33)
    */
    };
};



#define CTL_ESC &mt LCTRL ESC

/ {
     conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
//                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
//                  &kp LGUI &kp RET &mo 1     &mo 2 &kp SPACE &kp BSPC
                        display-name = "DEF";
                        bindings = <
// -------------------------------------------------------------------------------------------------------
// |  TAB   |   Q   |   W   |   E   |   R   |   T   |    |   Y   |   U   |   I   |   O   |   P   |  BSPC |
   &kp TAB   &kp Q    &kp W   &kp E   &kp R   &kp T        &kp Y    &kp U   &kp I   &kp O   &kp P   &kp BSPC
   CTL_ESC   &kp A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L   &kp SEMI &kp SQT 
   &mt LSHFT GRAVE &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &mt RSHFT ESC
                   &kp LGUI  &mo 1 &kp RET   &kp SPACE &mo 2 &kp RALT
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |

// &kp LGUI  &trans &kp RET      &kp SPACE &trans    &kp BSPC
                        display-name = "NUM";
                        bindings = <
   &kp TAB    &kp N1       &kp N2       &kp N3       &kp N4       &kp N5         &kp N6   &kp N7   &kp N8 &kp N9    &kp N0 &kp BSPC
   CTL_ESC    &trans       &trans       &trans       &trans       &trans         &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &kp HOME
   &kp LSHFT  &trans       &trans       &trans       &trans       &trans         &trans   &trans   &trans &trans    &trans &kp END
                           &kp LGUI     &trans       &kp RET      &kp SPACE      &mo 2    &kp RALT
                        >;
                };
                /*
                lower_layer {
                    display-name = "NUM";
                    bindings = <
    &kp TAB     &trans   &trans   &trans   &trans   &trans   &kp 7   &kp 8   &kp 9   &kp Z   &kp BSPC   
    &kp LCTRL   &trans   &trans   &trans   &trans   &trans   &kp 4   &kp 5   &kp 6   &kp ASTRK &trans         
    &kp LSHFT   &trans   &trans   &trans   &trans   &trans   &kp 1   &kp 2   &kp 3   &kp RBKT &trans         
                    >;
                }*/

                raise_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        display-name = "SYM";
                        bindings = <
   &kp  TAB  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp ASTRK &kp LPAR &kp RPAR &kp BSPC
   CTL_ESC   &trans   &trans &trans   &trans   &trans      &kp GRAVE &kp LBKT  &kp RBKT  &kp MINUS &kp EQUAL &kp BSLH 
   &kp LSHFT &trans   &trans &trans   &trans   &trans      &kp TILDE &kp LBRC  &kp RBRC  &kp UNDER &kp PLUS  &kp PIPE 
                             &kp LGUI  &trans &kp RET      &kp SPACE &trans    &kp RALT
                        >;
                };

                bt_layer {
// -----------------------------------------------------------------------------------------
// |  BRDN  |  BRUP |      |     |     |     |   |  BACK  |  PLAY  |  FFW  |  MUTE  |  VOL-  | VOL+ |
// |  BTCLR | BT1   | BT2  | BT3 |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |

// -----------------------------------------------------------------------------------------
// |       |  F1  |  F2  |  F3  |  F4  |  F5 |            |  F6  |  F7  |  F8  |  F9  |  F10  |   |
// |  BTCLR | BT1   | BT2  | BT3 | BT4 |     |            | Prev | Next |Mute | Vol - | Vol + |   |  
// | BTCLR | BT1 | BT2 | BT3 | BT4 | BT5 |   |            |     |     |     |     |     |     |
//                    |     |     |    |                  |     |     |     |
                        display-name = "ADJ";
                        bindings = <
   &sys_reset     &kp F1        &kp F2       &kp F3       &kp F4       &kp F5          &kp F6   &kp F7   &kp F8 &kp F9    &kp F10 &trans
   &kp LCTRL  &kp LC(F2)   &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans          
   &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &kp C_PREV &kp C_NEXT   &trans &kp C_VOL_DN &kp C_VOL_UP &trans 
                             &kp LGUI  &trans &kp RET      &kp SPACE &trans    &kp RALT
                        >;
                };
        };
};

/* Key positions
 0    1    2    3    4    5     6    7    8    9    10    11 
 12   13   14   15   16   17    18   19   20   21   22    23 
 24   25   26   27   28   29    30   31   32   33   34    35 
                36   37   38    39 40 41
 */

// &kp     &kp     &kp     &kp     &kp     &kp     &kp     &kp     &kp     &kp     &kp     &kp     
// &trans   &trans   &trans   &trans   &trans   &trans   
// &kp      &kp      &kp      &kp      &kp      &kp     
