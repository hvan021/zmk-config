/*
 * Copyright (c) 2020 The ZMK Contributors
 * SPDX-License-Identifier: MIT
 */
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/42.h"

#define DEF 0
#define QWE 1
#define CDV 2
#define PAD 3
#define SYM 4
#define ADJ 5
#define NAV 6
/*#define NUM 7*/

#define XXX &none
#define ___ &trans

#define QUICK_TAP_MS 125

#define TAP_SPEED 200

/* Homerow mods */

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5 // right hand

#ifndef LH2
    #define THUMBS LH1 LH0 RH0 RH1                                          // thumbs on 34 keys
#else
    #define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                  // thumbs on 36+ keys
#endif

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_HOLD_TAP(NAME, \
        flavor = "balanced"; \
        tapping-term-ms = <200>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs



&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <TAP_SPEED>;
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <TAP_SPEED>;
};

/*&soft_off {*/
/*    hold-time-ms = <2000>; // Only turn off it the key is held for 5 seconds or longer.*/
/*};*/


/ {

    behaviors{  

        tp: tap_preferred {
            compatible = "zmk,behavior-hold-tap";
            /*label = "TAP_PREFERRED";*/
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
          };

        /*hp: hold_preferred {*/
        /*    compatible = "zmk,behavior-hold-tap";*/
        /*    #binding-cells = <2>;*/
        /*    tapping-term-ms = <400>;*/
        /*    quick-tap-ms = <200>;*/
        /*    flavor = "hold-preferred";*/
        /*    bindings = <&kp>, <&kp>;*/
        /*  };*/

        tdlayout: tdlayswitch {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&to DEF>, <&to CDV>, <&to QWE>;
        }; 

        tdnavpad: tdnavpad {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&to NAV>, <&to PAD> ;
        }; 

        tdspcret: tdspcret {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&kp SPC>, <&kp RET>; 
        }; 

          // the right side always turns off on press :/
        soff: soft_off {
            compatible = "zmk,behavior-soft-off";
            #binding-cells = <0>;
            // split-peripheral-off-on-press;
            hold-time-ms = <2000>; // Only turn off it the key is held for 2 seconds or longer.
        };
    };

    combos {
        compatible = "zmk,combos";

        /*combo_esc {*/
        /*    timeout-ms = <50>;*/
        /*    key-positions = <19 20>;*/
        /*    bindings = <&kp ESC>;*/
        /*};*/

        combo_capw {
            timeout-ms = <50>;
            key-positions = <16 19>;
            bindings = <&caps_word>;
        };

        /*combo_ret {*/
        /*    timeout-ms = <50>;*/
        /*    key-positions = <22 23>;*/
        /*    bindings = <&kp RET>;*/
        /*};*/

        /*combo_npad {*/
        /*    timeout-ms = <50>;*/
        /*    key-positions = <15 16>;*/
        /*    bindings = <&mo PAD>;*/
        /*};*/

    };
};

#define CTL_ESC &mt LCTRL ESC
#define SHFT_SPC &mt LSHFT SPC
#define CMD_ESC &mt LGUI ESC
#define ALT_SPC &mt LALT SPC
#define TD_LAYRSW &tdlayout  // dvorak qwerty
#define TD_PADNAV &tdnavpad  // dvorak qwerty
#define TD_SPCRET &tdspcret  // space or return

#define BTCLR &bt BT_CLR
#define BTSEL &bt BT_SEL 

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <3 4>;
            then-layer = <ADJ>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
//  +------------------------------------+        +------------------------------------+
//  | TAB  |  '  |  ,  |  .  |  P  |  Y  |        |  F  |  G  |  C  |  R  |  L  | BKSP |
//  | CTRL |  A  |  O  |  E  |  U  |  I  |        |  D  |  H  |  T  |  N  |  S  | DEL  |
//  | SHFT |  ;  |  Q  |  J  |  K  |  X  |        |  B  |  M  |  W  |  V  |  Z  | S/ESC  |
//  +------------------| GUI | LWR | ENT |        | SPC | RSE | ALT/DEL |--------------+
//                     +-----------------+        +-----------------+
            display-name = "DVK";
            bindings = <
&kp TAB   &kp SQT  &kp COMMA &kp DOT &kp P &kp Y    &kp F &kp G &kp C &kp R &kp L &kp BSPC
/*CTL_ESC   &hml LGUI A &hml LALT O &hml LCTRL E &hml LSHFT U &kp I &kp D &hmr RSHFT H &hmr RCTRL T &hmr RALT N &hmr RGUI S &kp MINUS*/
CTL_ESC   &kp A &kp O &kp E &kp U &kp I &kp D &hmr RSHFT H &hmr RCTRL T &hmr RALT N &kp S &kp MINUS
&kp LSHFT &kp SEMI &kp Q     &kp J   &kp K &kp X    &kp B &kp M &kp W &kp V &kp Z &kp RSHFT
                    CMD_ESC &lt PAD TAB ALT_SPC     &kp SPC &lt SYM RET TD_LAYRSW
                    /*&lt NUM ESC &lt PAD TAB &kp SPC     &kp SPC &lt SYM RET TD_LAYRSW*/
            >;
        };

        qwe_layer {
// -----------------------------------------------------------------------------------------
// | TAB  |  Q  |  W  |  E  |  R  |    T    |   |  Y  |  U   |  I  |  O  |  P  | ESC |
// | CTRL |  A  |  S  |  D  |  F  |    G    |   |  H  |  J   |  K  |  L  |  ;  |  LWR/'   |
// | SHFT |  Z  |  X  |  C  |  V  |    B    |   |  N  |  M   |  ,  |  .  |  /  | SHFT |
//  +------------------| GUI | LWR | ENT |        | SPC | RSE | ALT/DEL |--------------+
//                     +-----------------+        +-----------------+
                display-name = "QWE";
                bindings = <
&kp TAB   &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P    &kp BSPC
CTL_ESC   &hml LGUI A &hml LALT S &hml LCTRL D &hml LSHFT F &kp G   &kp H &hmr RSHFT J &hmr RCTRL K &hmr RALT L &hmr RGUI SEMI &kp SQT
&kp LSHFT &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp RSHFT
                        &trans &trans &trans        &trans &trans &trans
                >;
        };

        clean_dvk {
            display-name = "CDV";
            bindings = <
&kp TAB   &kp SQT  &kp COMMA &kp DOT &kp P &kp Y    &kp F &kp G &kp C &kp R &kp L &kp BSPC
CTL_ESC   &kp A    &kp O     &kp E   &kp U &kp I    &kp D &kp H &kp T &kp N &kp S &kp MINUS
&kp LSHFT &kp SEMI &kp Q     &kp J   &kp K &kp X    &kp B &kp M &kp W &kp V &kp Z &kp RSHFT
                        &trans &trans &trans        &trans &trans &trans
            >;
        };

        pad_layer {
            display-name = "PAD";
            bindings = <
&trans &none   &none   &none   &none  &none         &kp STAR &kp N7 &kp N8 &kp N9 &kp FSLH &trans
&trans &sk LGUI &sk LALT &sk LCTRL &sk LSHFT &kp N5 &kp PLUS &kp N4 &kp N5 &kp N6 &kp N0   &trans 
/*&trans &kp N1  &kp N2   &kp N3    &kp N4    &kp N5  &kp PLUS &kp N4 &kp N5 &kp N6 &kp N0   &trans */
&trans &kp N6  &kp N7   &kp N8    &kp N9    &kp N0  &kp DOT  &kp N1 &kp N2 &kp N3 &kp COMMA &trans
                     &trans &trans &trans           &trans &trans &trans  
            >;
        };

        raise_layer {
//  +------------------------------------+        +------------------------------------+
//  | TAB  |  "  |  <  |  >  |  #  |  1  |        |  2  |  &  |  }  |  {  |  %  | BKSP |
//  | CTRL |  !  |  -  |  +  |  =  |  _  |        |  |  |  :  |  )  |  (  |  ?  | DEL  |
//  | SHFT |  ^  |  /  |  *  |  \  |  $  |        |  `  |  ~  |  ]  |  [  |  @  | S/ESC  |
//  +------------------| GUI | LWR | ENT |        | SPC | RSE | ALT/DEL |--------------+
//                     +-----------------+        +-----------------+
            display-name = "SYM";
            bindings = <
&trans &kp EXCL &kp AT   &kp HASH  &kp DLLR  &kp PRCNT  &kp CARET &kp AMPS  &kp STAR  &kp QMARK  &kp FSLH  &trans
&trans &kp GRAVE &kp TILDE &kp LPAR &kp LBRC &kp LBKT   &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT &kp BSLH &kp RET
&trans &kp BSLH  &kp PIPE  &kp RPAR &kp RBRC  &kp RBKT  &kp EQUAL &kp PLUS  &kp MINUS &kp UNDER &kp PIPE &trans 
                       &trans   &trans   &trans              &trans    &trans    &trans
            >;
        };

		tri_layer {
//  +------------------------------------+        +------------------------------------+
//  | BCLR  | BT0 | BT1 | BT2 | BT3 | BT4 |        |     |     | MUTE| VOL-| VOL+ |     |
//  | CTRL |     |     |     |     |     |        |     | LFT | DWN | RGT |     | DEL  |
//  | SHFT |     |     |     |     |     |        |     |     |     |     |     | S/ESC  |
//  +------------------| GUI | LWR | ENT |        | SPC | RSE | ALT/DEL |--------------+
//                     +-----------------+        +-----------------+
            display-name = "ADJ";
            bindings = <
BTCLR BTSEL 0   BTSEL 1    BTSEL 2   BTSEL 3   BTSEL 4     &kp LC(F2) &trans &trans &trans &trans &kp C_VOL_UP 
&soff &trans  &trans      &trans    &trans    &bootloader  &to DEF &to CDV &to QWE &to NAV &trans &kp C_VOL_DN
&trans &kp LG(Z) &kp LG(X) &kp LG(C) &kp LG(V) &sys_reset  &sys_reset &trans &trans &trans &trans &kp C_MUTE
                        &trans &trans &trans               &trans &trans &trans
            >;
        };

        nav_layer {
            display-name = "NAV";
            bindings = <
&trans &trans  &trans  &kp UP &trans   &trans        &trans   &trans   &trans   &trans   &trans   &trans
&trans &kp HOME  &kp LEFT &kp DOWN &kp RIGHT &kp END &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &trans 
&trans &trans &trans &trans &trans &trans            &trans  &trans &trans &trans &trans &trans
                     &trans &trans &trans            &trans  &trans &trans
            >;
        };

/*        num_layer {*/
/*            display-name = "NUM";*/
/*            bindings = <*/
/*&trans &kp EXCL &kp AT   &kp HASH  &kp DLLR  &kp PRCNT  &kp CARET &kp AMPS  &kp STAR  &kp LPAR  &kp RPAR  &trans*/
/*&trans &kp N1   &kp N2   &kp N3    &kp N4    &kp N5     &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT &kp QMARK &kp BSLH */
/*&trans &kp N6   &kp N7   &kp N8    &kp N9    &kp N0     &kp GRAVE &kp TILDE &kp EQUAL &kp PLUS  &kp FSLH  &kp PIPE*/
/*                     &trans &trans &trans         &trans  &trans TD_PADNAV*/
/*            >;*/
/*        };*/

    };
};




/*        lower_layer {*/
/*//  +------------------------------------+        +------------------------------------+*/
/*//  | TAB  | F7  | F5  | F3  | F1  | F9  |        | F11 | F2  | F4  | F6  | RGT | BKSP |*/
/*//  | CTRL |  1  |  2  |  3  |  4  |  5  |        |  6  |  7  |  8  |  9  |  0  | DEL  |*/
/*//  | SHFT |     |     |     |     |     |        |     |     |     |     |     | S/ESC  |*/
/*//  +------------------| GUI | LWR | ENT |        | SPC | RSE | ALT/DEL |--------------+*/
/*//                     +-----------------+        +-----------------+*/
/*            display-name = "NUM";*/
/*            bindings = <*/
/*&trans &kp N1 &kp N2 &kp N3 &kp N4 &kp N5         &kp N6  &kp N7 &kp N8 &kp N9 &kp N0 &trans*/
/*&trans &kp FSLH &kp STAR &kp PLUS &kp MINUS &kp DOT &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &trans */
/*&trans &kp F7 &kp F5 &kp F3 &kp F1 &kp F9         &kp F11 &kp F2 &kp F4 &kp F6 &kp F8 &trans*/
/*                     &trans &trans &trans         &trans  &trans TD_PADNAV*/
/*            >;*/
/*        };*/



/* Key positions
 0    1    2    3    4    5     6    7    8    9    10    11 
 12   13   14   15   16   17    18   19   20   21   22    23 
 24   25   26   27   28   29    30   31   32   33   34    35 
                36   37   38    39 40 41
 */

// &kp     &kp     &kp     &kp     &kp     &kp     &kp     &kp     &kp     &kp     &kp     &kp     
// &trans   &trans   &trans   &trans   &trans   &trans   
// &kp      &kp      &kp      &kp      &kp      &kp     

/*&trans &trans &trans &trans &trans &trans         &trans  &trans &trans &trans &trans &trans*/

/*&trans &kp F7 &kp F5 &kp F3 &kp F1 &kp F9         &kp F11 &kp F2 &kp F4 &kp F6 &kp F8 &trans*/
/*  vim: set filetype=c : */
